import UIKit

// ============================= for-in 반복문 =========================
// for-in 반복문은 몇 번 반복해야 할지 아는 경우에 적합
// 사용법 : for 상수명 in 반복될 범위 또는 컬렉션 { 실행될 코드 }
// 상수명은 복문이 돌면서 컬렉션 또는 범위에서 가져온 항목을 담게 될 상수다
// '컬렉션 또는 범위'는 반복문이 반복되면서 현재의 항목을 참조한다.
// '컬렉션 또는 범위'는 문자열 값들의 배열이거나 범위 연산, 문자들로 구성된 문자열일 수 있다.

// 실습
// i에 1부터 10까지 한 번씩 반복출력===========================
for i in 1..<11 {
    print("\(i)번 반복합니다.") // 1번 반복합니다. ~ 10번 반복합니다.
}

// "_"로 참조체 생략========================================
for _ in 0...9 { // "_"로 참조체를 생략할 수 있다.
    print("안녕") // 안녕 10번 출력
}

// 배열의 항목 접근==========================================
var names = ["재하", "서연", "황재", "조서"]
for name in names[0...3] { // names[0..3] 으로 인덱스 값으로도 접근가능
    print(name) // 재하 서연 황재 조서 세로로 출력
}

// dictionary의 항목 접근===================================
// dictionary는 key : value 형식의 배열입니다.
var breadprices = [
    "choco" : 1000, // key => "choco" value => 1000
    "vanila" : 1200,
    "plain" : 800
]

//breafName엔 key값, breadprice엔 value값이 들어갑니다.
for (breafName, breadprice) in breadprices {
    print("\(breafName)의 가격은 \(breadprice)원 입니다.")
}
// choco의 가격은 1000원 입니다.
// plain의 가격은 800원 입니다.
// vanila의 가격은 1200원 입니다.

// ========================= while 반복문 ===========================
// 어떠한 조건이 만족하기 전까지 반복함, 몇 번 반복하는지 알 수 없다
// 지정한 조건을 만족할 때까지 작업을 반복
// 사용법 : while 조건식 { //반복 코드 }

// 실습
// myCount 변수가 1000보다 크지 않을 때까지 반복, 1000이 되는 시점에 반복문이 종료
var myCount = 1
while myCount<1000 {
    myCount += 1
}
print(myCount) //1000

// =================== repeat-while 반복문 ===========================
// 적어도 한 번은 실행됨
// 사용법 : repeat { } while 조건식

// 실습
var i = 10
   repeat {
    i=i-1
    print(i) // 9~0까지 세로로 출력
   } while (i > 0)
